plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.5.RELEASE'
}

apply plugin: 'io.spring.dependency-management'

group 'com.ryan_mtg'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://oss.jfrog.org/artifactory/libs-release'
    }
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
    compile 'com.google.guava:guava:28.1-jre'
    compile 'com.github.twitch4j:twitch4j:1.0.0-alpha.17'
    compile 'mysql:mysql-connector-java:8.0.16'

    compile ('net.dv8tion:JDA:4.0.0_52') {
        exclude module: 'opus-java'
    }

    compile 'org.hibernate:hibernate-core:5.4.2.Final'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.1.RELEASE'
    compile 'org.springframework.security.oauth:spring-security-oauth2'
    compile 'org.springframework.security:spring-security-oauth2-client'

    compile 'org.springframework.data:spring-data-jpa:2.1.8.RELEASE'

    testCompile 'junit:junit'
    testCompile "org.mockito:mockito-core:2.+"
}

bootJar {
    archiveBaseName = 'servo-bot'

    mainClassName = 'com.ryan_mtg.servobot.Application'
}

bootRun {
    main = 'com.ryan_mtg.servobot.Application'
}

def deployDir = "${buildDir}/generated/deploy"

// Make sure config files have production values
task fixConfigFiles (type: Copy) {
    from ('src/main/resources') {
        include '**/application.properties'
        include '**/log4j2-spring.xml'
    }

    into deployDir + '/src/main/resources'

    filter {
        String line ->  line.replaceAll("spring.profiles.active = .*", "spring.profiles.active = prod")
                            .replaceAll("level=\"\\w+\"", "level=\"warn\"")
    }
}

task deploy (type: Zip) {
    group = 'build'
    description = 'Creates a source zip file for AWS deployment.'
    dependsOn(fixConfigFiles)

    doFirst {
        // Create Buildfile and Procfile for AWS deployment
        mkdir deployDir
        new File(deployDir, 'Buildfile').text = 'build: gradle build'
        def archiveFile = projectDir.relativePath(bootJar.archiveFile.get().asFile)
        new File(deployDir, 'Procfile').text = "web: java -jar ${archiveFile}"
    }

    into('src') {
        from fileTree('src')
        exclude '**/application.properties'
        exclude '**/log4j2-spring.xml'
    }

    into ('') {
        from fileTree(projectDir)
        include '*.gradle'
        exclude '.gradle'
    }

    into ('') {
        from fileTree(deployDir)
    }

    archiveBaseName = 'servo-bot-deploy'
}
